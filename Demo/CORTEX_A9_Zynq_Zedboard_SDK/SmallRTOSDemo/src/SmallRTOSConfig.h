
/*******************************************************************
*
* CAUTION: This file is automatically generated by HSM.
* Version: 
* DO NOT EDIT.
*
*  v (64-bit)
SW Build (by ) on 
Copyright 1986-2014 Xilinx, Inc. All Rights Reserved.
* 
* Description: SmallRTOS Configuration parameters
*
*******************************************************************/

#ifndef _SMALLRTOSCONFIG_H
#define _SMALLRTOSCONFIG_H


#include "xparameters.h"

#define configCPU_CLOCK_HZ 					( (100000000UL) )
#define configTICK_RATE_HZ 					( (1000) )
#define configMINIMAL_STACK_SIZE 			( (256) )
#define configTOTAL_HEAP_SIZE 				( (1024*80) )
#define configMAX_NAME_LEN 					( (10) )
#define configMAX_PRIORITIES 				( (8) )
#define configUSE_SEMAPHORE 				1
#define configUSE_MUTEX 					1
#define configUSE_MSGQ 						1
#define configMSGQ_MAX_MSGNUM 				( (10) )
#define configPEND_FOREVER_VALUE 			( (0xFFFFFFFFUL) )

#define configMAX_API_CALL_INTERRUPT_PRIORITY	18

#define configUSE_PORT_OPTIMISED_TASK_SELECTION	1

/* Callback funtion tast. */
#define configCALLBACK_TASK_PRIORITY			( configMAX_PRIORITIES - 1 )

/* The private watchdog is used to generate run time stats. */
#include "xscuwdt.h"
extern XScuWdt xWatchDogInstance;
extern void vInitialiseTimerForRunTimeStats( void );
#define configGENERATE_RUN_TIME_STATS 1
#define portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() vInitialiseTimerForRunTimeStats()
#define portGET_RUN_TIME_COUNTER_VALUE() ( ( 0xffffffffUL - XScuWdt_ReadReg( xWatchDogInstance.Config.BaseAddr, XSCUWDT_COUNTER_OFFSET ) ) >> 1 )

/* The size of the global output buffer that is available for use when there
are multiple command interpreters running at once (for example, one on a UART
and one on TCP/IP).  This is done to prevent an output buffer being defined by
each implementation - which would waste RAM.  In this case, there is only one
command interpreter running. */
#define configCOMMAND_INT_MAX_OUTPUT_SIZE 2096

/* Normal assert() semantics without relying on the provision of an assert.h
header file. */
void vAssertCalled( const char * pcFile, unsigned long ulLine );
#define configASSERT( x ) if( ( x ) == 0 ) vAssertCalled( __FILE__, __LINE__ );

/* If configTASK_RETURN_ADDRESS is not defined then a task that attempts to
return from its implementing function will end up in a "task exit error"
function - which contains a call to configASSERT().  However this can give GCC
some problems when it tries to unwind the stack, as the exit error function has
nothing to return to.  To avoid this define configTASK_RETURN_ADDRESS to 0.  */
#define configTASK_RETURN_ADDRESS	NULL


/****** Hardware specific settings. *******************************************/

/*
 * The application must provide a function that configures a peripheral to
 * create the SmallRTOS tick interrupt, then define configSETUP_TICK_INTERRUPT()
 * in SmallRTOSConfig.h to call the function.  This file contains a function
 * that is suitable for use on the Zynq MPU.  SmallRTOS_Tick_Handler() must
 * be installed as the peripheral's interrupt handler.
 */
void vConfigureTickInterrupt( void );
#define configSETUP_TICK_INTERRUPT() vConfigureTickInterrupt()

void vClearTickInterrupt( void );
#define configCLEAR_TICK_INTERRUPT() vClearTickInterrupt()

/* The following constant describe the hardware, and are correct for the
Zynq MPU. */
#define configINTERRUPT_CONTROLLER_BASE_ADDRESS 		( XPAR_PS7_SCUGIC_0_DIST_BASEADDR )
#define configINTERRUPT_CONTROLLER_CPU_INTERFACE_OFFSET ( -0xf00 )
#define configUNIQUE_INTERRUPT_PRIORITIES				32

/****** Network configuration settings - only used when the lwIP example is
built.  See the page that documents this demo on the http://www.SmallRTOS.org
website for more information. ***********************************************/

/* The priority for the task that unblocked by the MAC interrupt to process
received packets. */
#define configMAC_INPUT_TASK_PRIORITY		( configMAX_PRIORITIES - 1 )

/* The priority of the task that runs the lwIP stack. */
#define configLWIP_TASK_PRIORITY			( configMAX_PRIORITIES - 2 )

/* The priority of the task that uses lwIP sockets to provide a simple command
line interface. */
#define configTCPIP_TASK_PRIORITY			( configMAX_PRIORITIES - 3 )


/* MAC address configuration. */
#define configMAC_ADDR0	0x00
#define configMAC_ADDR1	0x13
#define configMAC_ADDR2	0x14
#define configMAC_ADDR3	0x15
#define configMAC_ADDR4	0x15
#define configMAC_ADDR5	0x16

/* IP address configuration. */
#define configIP_ADDR0		192
#define configIP_ADDR1		168
#define configIP_ADDR2		1
#define configIP_ADDR3		10

/* Gate Way configuration. */
#define configGATE_WAY0		192
#define configGATE_WAY1		168
#define configGATE_WAY2		1
#define configGATE_WAY3		1

/* Netmask configuration. */
#define configNET_MASK0		255
#define configNET_MASK1		255
#define configNET_MASK2		255
#define configNET_MASK3		0

#define TCP_PORT			7

#endif
